/**
 * @file ui_events.h
 * @brief Declaraciones de los manejadores de eventos de la interfaz de usuario
 * @details Este archivo contiene las declaraciones de todas las funciones que manejan
 *          los eventos de la interfaz de usuario, incluyendo:
 *          - Control de WiFi y Bluetooth
 *          - Control del sistema PID
 *          - Gestión del temporizador
 *          - Configuración de fecha y hora
 *          - Actualización del firmware
 * @author SquareLine Studio
 * @version 1.5.1
 * @date 2024
 */

// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.1
// LVGL version: 8.3.11
// Project name: UI_draft

#include "lvgl.h"
#include <stdint.h>

#ifndef _UI_EVENTS_H
#define _UI_EVENTS_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Activa el módulo WiFi del dispositivo
 * @param e Puntero al evento que activó la función
 */
void EncenderWifi(lv_event_t * e);

/**
 * @brief Desactiva el módulo WiFi del dispositivo
 * @param e Puntero al evento que activó la función
 */
void ApagarWifi(lv_event_t * e);

/**
 * @brief Activa el módulo Bluetooth del dispositivo
 * @param e Puntero al evento que activó la función
 */
void EncenderBt(lv_event_t * e);

/**
 * @brief Desactiva el módulo Bluetooth del dispositivo
 * @param e Puntero al evento que activó la función
 */
void ApagarBt(lv_event_t * e);

/**
 * @brief Activa el controlador PID
 * @param e Puntero al evento que activó la función
 */
void EncenderPID(lv_event_t * e);

/**
 * @brief Desactiva el controlador PID
 * @param e Puntero al evento que activó la función
 */
void ApagarPID(lv_event_t * e);

/**
 * @brief Inicia el temporizador del sistema
 * @param e Puntero al evento que activó la función
 */
void EncenderTimer(lv_event_t * e);

/**
 * @brief Detiene el temporizador del sistema
 * @param e Puntero al evento que activó la función
 */
void ApagarTimer(lv_event_t * e);

/**
 * @brief Cambia el nombre del dispositivo Bluetooth
 * @param e Puntero al evento que activó la función
 */
void CambiarNombreBT(lv_event_t * e);

/**
 * @brief Actualiza la fecha y hora del sistema
 * @param e Puntero al evento que activó la función
 */
void CambiarFechaHora(lv_event_t * e);

/**
 * @brief Inicia el proceso de actualización del firmware
 * @param e Puntero al evento que activó la función
 */
void UpdateFirmware(lv_event_t * e);

/**
 * @brief Intenta establecer una conexión WiFi
 * @param e Puntero al evento que activó la función
 */
void TryWifiConn(lv_event_t * e);

/**
 * @brief Actualiza los parámetros del controlador PID
 * @param e Puntero al evento que activó la función
 */
void ActualizarK(lv_event_t * e);

/**
 * @brief Callback para actualizar la hora en la interfaz
 * @param timer Puntero al temporizador que activó la función
 */
void actualizar_hora_cb(lv_timer_t *timer);

/**
 * @brief Actualiza el estado del PID en la interfaz
 * @param temperatura Temperatura actual del sistema
 * @param heating_on Estado del calentador
 */
void ui_actualizar_estado_pid(float temperatura, bool heating_on);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
